import sys                                 # M√≥dulo para interagir com o interpretador Python
sys.stdout.reconfigure(encoding='utf-8')   # Configura a sa√≠da padr√£o (stdout) para UTF-8, evitando problemas com acentos

import pandas as pd                        # Biblioteca para manipula√ß√£o de dados e leitura/escrita de Excel
import requests                            # Biblioteca para fazer requisi√ß√µes HTTP
import json                                # Biblioteca para trabalhar com dados no formato JSON
import numpy as np                         # Biblioteca para trabalhar com arrays e tipos num√©ricos
from datetime import datetime              # Classe datetime para trabalhar com datas e horas
import urllib3                             # Biblioteca usada pelo requests para conex√µes HTTP
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)  
# Desativa avisos de "InsecureRequestWarning" quando verify=False √© usado (n√£o recomendado em produ√ß√£o)

# Configura√ß√µes
file_name = "usuariosPortal.xls"           # Nome do arquivo Excel, a ser lido, com os usu√°rios
sheet_name = "usuariosPortal"              # Nome da aba (sheet) dentro do Excel a ser lida

# URL da API para excluir setor
url_excluir_setor = "https://processodigital.ribeiraopreto.sp.gov.br/solarbpm-integracao/usuario/excluir-setor"
# Essa √© a URL da API que ser√° chamada para remover um setor espec√≠fico de um usu√°rio

# URL e credenciais de autentica√ß√£o
url_auth = "https://pmribeirao-services-pro:46281f9f-f1f8-450e-97b9-dee7772cc94b-pro@processodigital.ribeiraopreto.sp.gov.br/ungp-server-oauth/oauth/token"
# Endpoint de autentica√ß√£o OAuth que retorna o token de acesso
user_auth = "JORGE.MAMANI"                  # Nome de usu√°rio usado para autenticar

# Classe para serializar objetos do tipo numpy
class NpEncoder(json.JSONEncoder):          # Cria uma classe personalizada para converter tipos numpy para JSON
    def default(self, obj):                  # M√©todo chamado quando json.dumps() encontra um objeto que n√£o sabe converter
        if isinstance(obj, np.integer): return int(obj)        # Converte numpy inteiro para int do Python
        if isinstance(obj, np.floating): return float(obj)     # Converte numpy float para float do Python
        if isinstance(obj, np.ndarray): return obj.tolist()    # Converte numpy array para lista
        return super().default(obj)          # Para outros tipos, usa a implementa√ß√£o padr√£o

# Data/hora para nome do arquivo de resultado
now = datetime.now()                         # Obt√©m data e hora atual
dt_string = now.strftime("%d_%m_%Y_%H_%M_%S") # Formata data/hora no formato DD_MM_AAAA_HH_MM_SS

# Leitura da planilha de usu√°rios
df = pd.read_excel(file_name, sheet_name=sheet_name, dtype={"CDUSUARIO": str})
# L√™ o Excel na aba indicada e garante que a coluna "CDUSUARIO" seja lida como string (evita perda de zeros √† esquerda)

cdusuarios = df["CDUSUARIO"].dropna().astype(str).tolist()
# Seleciona a coluna "CDUSUARIO", remove valores nulos, converte para string e transforma em lista Python

# Autentica√ß√£o
headers_auth = {"Content-Type": "application/x-www-form-urlencoded"}
# Cabe√ßalho HTTP para informar que os dados no corpo da requisi√ß√£o estar√£o no formato de formul√°rio

raw_auth = f"grant_type=client_credentials&cdUsuario={user_auth}"
# Corpo da requisi√ß√£o de autentica√ß√£o no formato esperado pela API OAuth

resp_auth = requests.post(url_auth, data=raw_auth, headers=headers_auth, verify=False)
# Envia uma requisi√ß√£o POST para a URL de autentica√ß√£o para obter o token de acesso
# verify=False significa que o certificado SSL n√£o ser√° verificado (inseguro em produ√ß√£o)

if resp_auth.status_code == 200:             # Verifica se a autentica√ß√£o foi bem-sucedida (HTTP 200)
    token = resp_auth.json()["access_token"] # Extrai o token de acesso do JSON retornado
    print("\n‚úÖ Token obtido com sucesso")   # Mensagem de confirma√ß√£o no console

    headers_api = {
        "Content-Type": "application/json",   # Corpo das requisi√ß√µes seguintes ser√° JSON
        "Authorization": "Bearer " + token,   # Cabe√ßalho de autoriza√ß√£o com o token
        "accept": "application/json"          # Informa que aceitamos resposta em JSON
    }

    resultados = []                           # Lista para armazenar os resultados (sucesso ou erro) para cada usu√°rio
    for cd in cdusuarios:                     # Loop para processar cada usu√°rio da lista
        # Payload para remover o setor PORTAL do usu√°rio atual
        payload = {
            "setoresUsuarios": [
                {
                    "cdUsuario": cd,          # C√≥digo do usu√°rio
                    "unidades": [             # Lista de unidades a serem removidas
                        {
                            "sgOrgao": "PMRP",  # Sigla do √≥rg√£o
                            "sgUnidade": "PORTAL"   # Sigla da unidade
                        }
                    ]
                }
            ]
        }

        # Envia a requisi√ß√£o para excluir o setor do usu√°rio
        resp = requests.post(
            url_excluir_setor,                          # URL da API de exclus√£o
            data=json.dumps(payload, cls=NpEncoder),    # Serializa payload em JSON usando NpEncoder
            headers=headers_api,                        # Cabe√ßalhos com token de autentica√ß√£o
            verify=False                                # Ignora verifica√ß√£o do SSL
        )

        if resp.status_code == 200:                     # Se a exclus√£o foi bem-sucedida
            resultados.append({"CDUSUARIO": cd, "RESULTADO": "Removido com sucesso"})
            print(f"‚úÖ Setor PORTAL removido para {cd}")
        else:
            try:
                erro = resp.json()                      # Tenta ler a resposta como JSON
            except:
                erro = resp.text                        # Se falhar, l√™ como texto puro
            resultados.append({"CDUSUARIO": cd, "RESULTADO": f"Erro: {erro}"})
            print(f"‚ùå Erro para {cd}: {erro}")

    # Salva o resultado final em um arquivo Excel
    df_resultado = pd.DataFrame(resultados)              # Converte lista de resultados para DataFrame
    output_file = f"resultado_remocao_setor_{dt_string}.xlsx"  # Nome do arquivo de sa√≠da com data/hora
    df_resultado.to_excel(output_file, index=False)      # Salva o DataFrame no Excel sem √≠ndice
    print(f"\nüìÑ Arquivo de resultado salvo como: {output_file}")

else:
    print("‚ùå Falha na autentica√ß√£o. Verifique o link ou o usu√°rio.")  
    # Mensagem caso a autentica√ß√£o falhe

##############################################################################################################

import sys                                 # M√≥dulo para interagir com o interpretador Python
sys.stdout.reconfigure(encoding='utf-8')   # Configura a sa√≠da padr√£o (stdout) para UTF-8, evitando problemas com acentos
import os                                  # M√≥dulo para interagir com o sistema operacional (manipula√ß√£o de arquivos e diret√≥rios)
import pandas as pd                        # Biblioteca para manipula√ß√£o de dados e leitura/escrita de Excel
import requests                            # Biblioteca para fazer requisi√ß√µes HTTP
import json                                # Biblioteca para trabalhar com dados no formato JSON
import numpy as np                         # Biblioteca para trabalhar com arrays e tipos num√©ricos
from datetime import datetime              # Classe datetime para trabalhar com datas e horas
import urllib3                             # Biblioteca usada pelo requests para conex√µes HTTP
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)  
# Desativa avisos de "InsecureRequestWarning" quando verify=False √© usado (n√£o recomendado em produ√ß√£o)

# Configura√ß√µes
file_name = r"C:\Users\thiago.teixeira\Downloads\usuariosSaerp.xls"       # Nome do arquivo Excel, a ser lido, com os usu√°rios
sheet_name = "usuariosSaerp"             # Nome da aba (sheet) dentro do Excel a ser lida

# URL da API para excluir setor
url_excluir_setor = "https://processodigital.ribeiraopreto.sp.gov.br/solarbpm-integracao/usuario/excluir-setor"
# Essa √© a URL da API que ser√° chamada para remover um setor espec√≠fico de um usu√°rio

# Verifica se o arquivo existe
if not os.path.isfile(file_name):
    print(f"‚ùå ERRO: O arquivo '{file_name}' n√£o foi encontrado no diret√≥rio '{os.getcwd()}'")
    print("‚û° Solu√ß√µes poss√≠veis:")
    print("1. Coloque o arquivo na mesma pasta deste script.")
    print("2. Informe o caminho completo do arquivo na vari√°vel file_name.")
    print("3. Verifique se a extens√£o est√° correta (.xls ou .xlsx).")
    exit()  # encerra o programa

# L√™ o arquivo Excel

# URL e credenciais de autentica√ß√£o
url_auth = "https://pmribeirao-services-pro:46281f9f-f1f8-450e-97b9-dee7772cc94b-pro@processodigital.ribeiraopreto.sp.gov.br/ungp-server-oauth/oauth/token"
# Endpoint de autentica√ß√£o OAuth que retorna o token de acesso
user_auth = "THIAGO.TEIXEIRA"                  # Nome de usu√°rio usado para autenticar

# Classe para serializar objetos do tipo numpy
class NpEncoder(json.JSONEncoder):          # Cria uma classe personalizada para converter tipos numpy para JSON
    def default(self, obj):                  # M√©todo chamado quando json.dumps() encontra um objeto que n√£o sabe converter
        if isinstance(obj, np.integer): return int(obj)        # Converte numpy inteiro para int do Python
        if isinstance(obj, np.floating): return float(obj)     # Converte numpy float para float do Python
        if isinstance(obj, np.ndarray): return obj.tolist()    # Converte numpy array para lista
        return super().default(obj)          # Para outros tipos, usa a implementa√ß√£o padr√£o

# Data/hora para nome do arquivo de resultado
now = datetime.now()                         # Obt√©m data e hora atual
dt_string = now.strftime("%d_%m_%Y_%H_%M_%S") # Formata data/hora no formato DD_MM_AAAA_HH_MM_SS

# Leitura da planilha de usu√°rios
df = pd.read_excel(file_name, sheet_name=sheet_name, dtype={"CDUSUARIO": str})
# L√™ o Excel na aba indicada e garante que a coluna "CDUSUARIO" seja lida como string (evita perda de zeros √† esquerda)

cdusuarios = df["CDUSUARIO"].dropna().astype(str).tolist()
# Seleciona a coluna "CDUSUARIO", remove valores nulos, converte para string e transforma em lista Python

# Autentica√ß√£o
headers_auth = {"Content-Type": "application/x-www-form-urlencoded"}
# Cabe√ßalho HTTP para informar que os dados no corpo da requisi√ß√£o estar√£o no formato de formul√°rio

raw_auth = f"grant_type=client_credentials&cdUsuario={user_auth}"
# Corpo da requisi√ß√£o de autentica√ß√£o no formato esperado pela API OAuth

resp_auth = requests.post(url_auth, data=raw_auth, headers=headers_auth, verify=False)
# Envia uma requisi√ß√£o POST para a URL de autentica√ß√£o para obter o token de acesso
# verify=False significa que o certificado SSL n√£o ser√° verificado (inseguro em produ√ß√£o)

if resp_auth.status_code == 200:             # Verifica se a autentica√ß√£o foi bem-sucedida (HTTP 200)
    token = resp_auth.json()["access_token"] # Extrai o token de acesso do JSON retornado
    print("\n‚úÖ Token obtido com sucesso")   # Mensagem de confirma√ß√£o no console

    headers_api = {
        "Content-Type": "application/json",   # Corpo das requisi√ß√µes seguintes ser√° JSON
        "Authorization": "Bearer " + token,   # Cabe√ßalho de autoriza√ß√£o com o token
        "accept": "application/json"          # Informa que aceitamos resposta em JSON
    }

    resultados = []                           # Lista para armazenar os resultados (sucesso ou erro) para cada usu√°rio
    for cd in cdusuarios:                     # Loop para processar cada usu√°rio da lista
        # Payload para remover o setor SAERP-POP do usu√°rio atual
        payload = {
            "setoresUsuarios": [
                {
                    "cdUsuario": cd,          # C√≥digo do usu√°rio
                    "unidades": [             # Lista de unidades a serem removidas
                        {
                            "sgOrgao": "PMRP",  # Sigla do √≥rg√£o
                            "sgUnidade": "SAERP-POP"   # Sigla da unidade
                        }
                    ]
                }
            ]
        }

        # Envia a requisi√ß√£o para excluir o setor do usu√°rio
        resp = requests.post(
            url_excluir_setor,                          # URL da API de exclus√£o
            data=json.dumps(payload, cls=NpEncoder),    # Serializa payload em JSON usando NpEncoder
            headers=headers_api,                        # Cabe√ßalhos com token de autentica√ß√£o
            verify=False                                # Ignora verifica√ß√£o do SSL
        )

        if resp.status_code == 200:                     # Se a exclus√£o foi bem-sucedida
            resultados.append({"CDUSUARIO": cd, "RESULTADO": "Removido com sucesso"})
            print(f"‚úÖ Setor SAERP-POP removido para {cd}")
        else:
            try:
                erro = resp.json()                      # Tenta ler a resposta como JSON
            except:
                erro = resp.text                        # Se falhar, l√™ como texto puro
            resultados.append({"CDUSUARIO": cd, "RESULTADO": f"Erro: {erro}"})
            print(f"‚ùå Erro para {cd}: {erro}")

    # Salva o resultado final em um arquivo Excel
    df_resultado = pd.DataFrame(resultados)              # Converte lista de resultados para DataFrame
    output_file = f"resultado_remocao_setor_{dt_string}.xlsx"  # Nome do arquivo de sa√≠da com data/hora
    df_resultado.to_excel(output_file, index=False)      # Salva o DataFrame no Excel sem √≠ndice
    print(f"\nüìÑ Arquivo de resultado salvo como: {output_file}")

else:
    print("‚ùå Falha na autentica√ß√£o. Verifique o link ou o usu√°rio.")  
    # Mensagem caso a autentica√ß√£o falhe