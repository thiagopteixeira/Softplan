import sys                            # importa o m√≥dulo `sys` para interoperar com o interpretador Python e I/O.
sys.stdout.reconfigure(encoding='utf-8')  # reconfigura a sa√≠da padr√£o (stdout) para usar UTF-8 ‚Äî √∫til para imprimir acentos corretamente.

import pandas as pd                   # importa pandas (alias pd) para leitura/manipula√ß√£o de planilhas e DataFrames.
import requests                       # importa requests para fazer requisi√ß√µes HTTP.
import json                           # importa json para serializar/desserializar JSON.
import numpy as np                    # importa numpy (alias np) ‚Äî usado mais abaixo para tratar tipos numpy.
from datetime import datetime         # importa datetime para obter a data/hora atual.
import urllib3                        # importa urllib3 (biblioteca de baixo n√≠vel utilizada por requests).
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)
# desativa avisos de certificado inseguro (InsecureRequestWarning).
# OBS: isso apenas oculta o aviso; n√£o corrige o problema de usar verify=False (inseguro).

# Configura√ß√µes
file_name = "usuarioSaerpPOPP.xls"    # nome do arquivo Excel de entrada (espera existir no diret√≥rio de execu√ß√£o).
sheet_name = "user"                   # nome da aba dentro do arquivo Excel a ser lida.
url_setores = "https://processodigital.ribeiraopreto.sp.gov.br/solarbpm-integracao/usuario/excluir-setor"
# URL da API para excluir setores de um usu√°rio (substitua se necess√°rio).

url_auth = "https://pmribeirao-services-pro:46281f9f-f1f8-450e-97b9-dee7772cc94b-pro@processodigital.ribeiraopreto.sp.gov.br/ungp-server-oauth/oauth/token"
# URL de autentica√ß√£o (note que aqui h√° credenciais embutidas na URL ‚Äî isso √© inseguro em produ√ß√£o).

user_auth = "JORGE.MAMANI"            # usu√°rio que ser√° informado no corpo da requisi√ß√£o de autentica√ß√£o.

# Classe para serializar objetos numpy
class NpEncoder(json.JSONEncoder):     # cria um encoder JSON customizado para tipos numpy.
    def default(self, obj):
        if isinstance(obj, np.integer): return int(obj)   # converte numpy.integer para int padr√£o.
        if isinstance(obj, np.floating): return float(obj) # converte numpy.floating para float padr√£o.
        if isinstance(obj, np.ndarray): return obj.tolist() # converte ndarray para lista (serializ√°vel).
        return super().default(obj)  # delega para o comportamento padr√£o para outros tipos.

# Data para salvar o resultado
now = datetime.now()                  # captura data/hora atual.
dt_string = now.strftime("%d_%m_%Y_%H_%M_%S")  # formata a data/hora para usar no nome do arquivo de sa√≠da.

# Leitura da planilha
df = pd.read_excel(file_name, sheet_name=sheet_name, dtype={"CDUSUARIO": str})
# l√™ o arquivo Excel, na aba especificada. For√ßa a coluna "CDUSUARIO" a ser string (evita perda de zeros √† esquerda).

cdusuarios = df["CDUSUARIO"].dropna().astype(str).tolist()
# pega a coluna "CDUSUARIO", remove valores NaN, garante tipo string e converte para lista Python de CD's de usu√°rio.

# Autentica√ß√£o
headers_auth = {"Content-Type": "application/x-www-form-urlencoded"}
# cabe√ßalho indicando que o corpo da requisi√ß√£o ser√° form-urlencoded (texto: chave=valor&...).

raw_auth = f"grant_type=client_credentials&cdUsuario={user_auth}"
# monta o corpo da autentica√ß√£o com grant_type=client_credentials e o cdUsuario definido acima.
# OBS: dependendo do provedor OAuth, normalmente tamb√©m s√£o necess√°rios client_id/client_secret.

resp_auth = requests.post(url_auth, data=raw_auth, headers=headers_auth, verify=False)
# faz POST para obter token. `verify=False` desativa verifica√ß√£o de SSL (inseguro).
# Se o endpoint exigir autentica√ß√£o b√°sica via URL (como aqui), requests tratar√° isso automaticamente.
# verify=False evita erro de certificado mas abre risco de MITM.

if resp_auth.status_code == 200:
    token = resp_auth.json()["access_token"]
    # extrai o access_token do JSON de resposta. Pode lan√ßar KeyError se a resposta n√£o contiver essa chave.
    print("\n‚úÖ Token obtido com sucesso")

    headers_api = {
        "Content-Type": "application/json",
        "Authorization": "Bearer " + token,
        "accept": "application/json"
    }
    # cabe√ßalhos a serem usados nas chamadas da API: conte√∫do JSON e Authorization Bearer.

    resultados = []                   # lista para acumular resultados (sucesso/erro) por usu√°rio.
    for cd in cdusuarios:             # itera cada CD de usu√°rio lido da planilha.
        payload = {
        "setoresUsuarios": [
                {
                "cdUsuario": cd,      # define o usu√°rio a ser alterado
                "unidades": [
                    {
                    "sgOrgao": "PMRP",       # sigla do √≥rg√£o (fixa no seu payload)
                    "sgUnidade": "SAERP-POP" # sigla da unidade/setor que ser√° exclu√≠do
                    }
                ]
                }
            ]
        }
        # payload montado como dicion√°rio Python. Ser√° serializado para JSON.

        resp = requests.delete(url_setores, data=json.dumps(payload, cls=NpEncoder), headers=headers_api, verify=False)
        # faz requisi√ß√£o DELETE enviando o payload serializado.
        # Observa√ß√£o: alguns servidores n√£o aceitam body em DELETE; confirmar contrato da API.
        # Usa NpEncoder para garantir serializa√ß√£o de tipos numpy caso existam.
        # verify=False novamente desativa verifica√ß√£o de certificado (inseguro).

        if resp.status_code == 200:
            resultados.append({"CDUSUARIO": cd, "RESULTADO": "Sucesso"})
            print(f"‚úÖ Setor excluido de  {cd}")
        else:
            try:
                erro = resp.json()     # tenta transformar a resposta em JSON para obter detalhes do erro.
            except:
                erro = resp.text       # se n√£o for JSON, pega o texto cru da resposta.
            resultados.append({"CDUSUARIO": cd, "RESULTADO": f"Erro: {erro}"})
            print(f"‚ùå Erro para {cd}: {erro}")

    # Salva o resultado
    df_resultado = pd.DataFrame(resultados)    # cria DataFrame com os resultados acumulados.
    output_file = f"resultado_setores_usuarios_{dt_string}.xlsx"  # monta nome do arquivo de sa√≠da com timestamp.
    df_resultado.to_excel(output_file, index=False) # salva o DataFrame em Excel (sem √≠ndice).
    print(f"\nüìÑ Arquivo de resultado salvo como: {output_file}")

else:
    print("‚ùå Falha na autentica√ß√£o. Verifique o link ou o usu√°rio.")
    # caso a autentica√ß√£o n√£o retorne 200, imprime mensagem de erro simples.


##############################################################################################################

import sys                            # importa o m√≥dulo `sys` para interoperar com o interpretador Python e I/O.
sys.stdout.reconfigure(encoding='utf-8')  # reconfigura a sa√≠da padr√£o (stdout) para usar UTF-8 ‚Äî √∫til para imprimir acentos corretamente.

import pandas as pd                   # importa pandas (alias pd) para leitura/manipula√ß√£o de planilhas e DataFrames.
import requests                       # importa requests para fazer requisi√ß√µes HTTP.
import json                           # importa json para serializar/desserializar JSON.
import numpy as np                    # importa numpy (alias np) ‚Äî usado mais abaixo para tratar tipos numpy.
from datetime import datetime         # importa datetime para obter a data/hora atual.
import urllib3                        # importa urllib3 (biblioteca de baixo n√≠vel utilizada por requests).
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)
# desativa avisos de certificado inseguro (InsecureRequestWarning).
# OBS: isso apenas oculta o aviso; n√£o corrige o problema de usar verify=False (inseguro).

# Configura√ß√µes
file_name = "usuarioSaerpPOPP.xls"    # nome do arquivo Excel de entrada (espera existir no diret√≥rio de execu√ß√£o).
sheet_name = "user"                   # nome da aba dentro do arquivo Excel a ser lida.
url_setores = "https://processodigital.ribeiraopreto.sp.gov.br/solarbpm-integracao/usuario/excluir-setor"
# URL da API para excluir setores de um usu√°rio (substitua se necess√°rio).

url_auth = "https://pmribeirao-services-pro:46281f9f-f1f8-450e-97b9-dee7772cc94b-pro@processodigital.ribeiraopreto.sp.gov.br/ungp-server-oauth/oauth/token"
# URL de autentica√ß√£o (note que aqui h√° credenciais embutidas na URL ‚Äî isso √© inseguro em produ√ß√£o).

user_auth = "JORGE.MAMANI"            # usu√°rio que ser√° informado no corpo da requisi√ß√£o de autentica√ß√£o.

# Classe para serializar objetos numpy
class NpEncoder(json.JSONEncoder):     # cria um encoder JSON customizado para tipos numpy.
    def default(self, obj):
        if isinstance(obj, np.integer): return int(obj)   # converte numpy.integer para int padr√£o.
        if isinstance(obj, np.floating): return float(obj) # converte numpy.floating para float padr√£o.
        if isinstance(obj, np.ndarray): return obj.tolist() # converte ndarray para lista (serializ√°vel).
        return super().default(obj)  # delega para o comportamento padr√£o para outros tipos.

# Data para salvar o resultado
now = datetime.now()                  # captura data/hora atual.
dt_string = now.strftime("%d_%m_%Y_%H_%M_%S")  # formata a data/hora para usar no nome do arquivo de sa√≠da.

# Leitura da planilha
df = pd.read_excel(file_name, sheet_name=sheet_name, dtype={"CDUSUARIO": str})
# l√™ o arquivo Excel, na aba especificada. For√ßa a coluna "CDUSUARIO" a ser string (evita perda de zeros √† esquerda).

cdusuarios = df["CDUSUARIO"].dropna().astype(str).tolist()
# pega a coluna "CDUSUARIO", remove valores NaN, garante tipo string e converte para lista Python de CD's de usu√°rio.

# Autentica√ß√£o
headers_auth = {"Content-Type": "application/x-www-form-urlencoded"}
# cabe√ßalho indicando que o corpo da requisi√ß√£o ser√° form-urlencoded (texto: chave=valor&...).

raw_auth = f"grant_type=client_credentials&cdUsuario={user_auth}"
# monta o corpo da autentica√ß√£o com grant_type=client_credentials e o cdUsuario definido acima.
# OBS: dependendo do provedor OAuth, normalmente tamb√©m s√£o necess√°rios client_id/client_secret.

resp_auth = requests.post(url_auth, data=raw_auth, headers=headers_auth, verify=False)
# faz POST para obter token. `verify=False` desativa verifica√ß√£o de SSL (inseguro).
# Se o endpoint exigir autentica√ß√£o b√°sica via URL (como aqui), requests tratar√° isso automaticamente.
# verify=False evita erro de certificado mas abre risco de MITM.

if resp_auth.status_code == 200:
    token = resp_auth.json()["access_token"]
    # extrai o access_token do JSON de resposta. Pode lan√ßar KeyError se a resposta n√£o contiver essa chave.
    print("\n‚úÖ Token obtido com sucesso")

    headers_api = {
        "Content-Type": "application/json",
        "Authorization": "Bearer " + token,
        "accept": "application/json"
    }
    # cabe√ßalhos a serem usados nas chamadas da API: conte√∫do JSON e Authorization Bearer.

    resultados = []                   # lista para acumular resultados (sucesso/erro) por usu√°rio.
    for cd in cdusuarios:             # itera cada CD de usu√°rio lido da planilha.
        payload = {
        "setoresUsuarios": [
                {
                "cdUsuario": cd,      # define o usu√°rio a ser alterado
                "unidades": [
                    {
                    "sgOrgao": "PMRP",       # sigla do √≥rg√£o (fixa no seu payload)
                    "sgUnidade": "SAERP-POP" # sigla da unidade/setor que ser√° exclu√≠do
                    }
                ]
                }
            ]
        }
        # payload montado como dicion√°rio Python. Ser√° serializado para JSON.

        resp = requests.delete(url_setores, data=json.dumps(payload, cls=NpEncoder), headers=headers_api, verify=False)
        # faz requisi√ß√£o DELETE enviando o payload serializado.
        # Observa√ß√£o: alguns servidores n√£o aceitam body em DELETE; confirmar contrato da API.
        # Usa NpEncoder para garantir serializa√ß√£o de tipos numpy caso existam.
        # verify=False novamente desativa verifica√ß√£o de certificado (inseguro).

        if resp.status_code == 200:
            resultados.append({"CDUSUARIO": cd, "RESULTADO": "Sucesso"})
            print(f"‚úÖ Setor excluido de  {cd}")
        else:
            try:
                erro = resp.json()     # tenta transformar a resposta em JSON para obter detalhes do erro.
            except:
                erro = resp.text       # se n√£o for JSON, pega o texto cru da resposta.
            resultados.append({"CDUSUARIO": cd, "RESULTADO": f"Erro: {erro}"})
            print(f"‚ùå Erro para {cd}: {erro}")

    # Salva o resultado
    df_resultado = pd.DataFrame(resultados)    # cria DataFrame com os resultados acumulados.
    output_file = f"resultado_setores_usuarios_{dt_string}.xlsx"  # monta nome do arquivo de sa√≠da com timestamp.
    df_resultado.to_excel(output_file, index=False) # salva o DataFrame em Excel (sem √≠ndice).
    print(f"\nüìÑ Arquivo de resultado salvo como: {output_file}")

else:
    print("‚ùå Falha na autentica√ß√£o. Verifique o link ou o usu√°rio.")
    # caso a autentica√ß√£o n√£o retorne 200, imprime mensagem de erro simples.